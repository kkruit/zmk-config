/*
* Copyright (c) 2022 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

#define U_MACRO_VA_ARGS(macro, ...) macro(__VA_ARGS__)
#define U_STRINGIFY(x) #x
#define U_MACRO(name,...) \
/ { \
  macros { \
    name: name { \
      label = U_STRINGIFY(ZM_ ## name); \
      compatible = "zmk,behavior-macro"; \
      #binding-cells = <0>; \
      __VA_ARGS__ \
    }; \
  }; \
};

#define MIRYOKU_SHIFT_FUNCTION(NAME, BINDING, SHIFT_BINDING) \
/ { \
  behaviors { \
    NAME: NAME { \
      compatible = "zmk,behavior-mod-morph"; \
      label = U_STRINGIFY(NAME); \
      #binding-cells = <0>; \
      bindings = <BINDING>, <SHIFT_BINDING>; \
      mods = <(MOD_LSFT|MOD_RSFT)>; \
    }; \
  }; \
};

#define MIRYOKU_SHIFT_MACRO(NAME, BINDING, SHIFT_BINDING) \
U_MACRO(u_macro_ ## NAME, wait-ms = <0>; bindings = <SHIFT_BINDING>;) \
MIRYOKU_SHIFT_FUNCTION(NAME, BINDING, &u_macro_ ## NAME)

MIRYOKU_SHIFT_MACRO(u_bt_sel_0, &bt BT_SEL 0, &bt BT_SEL 0 &bt BT_CLR)
MIRYOKU_SHIFT_MACRO(u_bt_sel_1, &bt BT_SEL 1, &bt BT_SEL 1 &bt BT_CLR)
MIRYOKU_SHIFT_MACRO(u_bt_sel_2, &bt BT_SEL 2, &bt BT_SEL 2 &bt BT_CLR)
MIRYOKU_SHIFT_MACRO(u_bt_sel_3, &bt BT_SEL 3, &bt BT_SEL 3 &bt BT_CLR)
MIRYOKU_SHIFT_MACRO(u_bt_sel_4, &bt BT_SEL 4, &bt BT_SEL 4 &bt BT_CLR)


#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1250
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 100

#define U_MOUSE_MOVE_EXPONENT 1
#define U_MOUSE_MOVE_TIME 1500
#define U_MOUSE_MOVE_DELAY 0
#define U_MOUSE_SCROLL_EXPONENT 1
#define U_MOUSE_SCROLL_TIME 5000
#define U_MOUSE_SCROLL_DELAY 0

#define U_RDO &kp LC(Y)
#define U_PST &kp LC(V)
#define U_CPY &kp LC(C)
#define U_CUT &kp LC(X)
#define U_UND &kp LC(Z)

#define BASE 0
#define FUN 1
#define NUM 2
#define SYM 3
//#define MOUSE 4
#define NAV 4
#define MEDIA 5
#define QWERTY 6
#define GAME 7

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
};

/ {

    keymap {
        compatible = "zmk,keymap";

// BASE 0
        BASE_layer {
            bindings = <
                            &kp W       &kp F        &kp P        &kp B            &kp J     &kp L        &kp U        &kp Y
          &kp Q &mt LGUI A  &mt LALT R  &mt LCTRL S  &mt LSHFT T  &kp G            &kp M     &mt RSHFT N  &mt RCTRL E  &mt RALT I  &mt RGUI O  &kp SQT
                &kp Z       &kp X       &kp C        &kp D        &kp V            &kp K     &kp H        &kp COMMA    &kp DOT     &kp FSLH
                                     &lt FUN DEL  &lt NUM BSPC  &lt SYM RET     &lt QWERTY TAB  &lt NAV SPACE  &lt MEDIA ESC 
            >;
        };

// FUN 1
        FUN_layer {
            bindings = <
                            &to QWERTY  &to GAME    &to BASE    &none              &kp PSCRN        &kp F7      &kp F8      &kp F9
      &none     &kp LGUI    &kp LALT    &kp LCTRL   &kp LSHFT   &none              &kp SLCK         &kp F4      &kp F5      &kp F6     &kp F11    &kp F12
                &none       &none       &none       &none       &none              &kp PAUSE_BREAK  &kp F1      &kp F2      &kp F3     &kp F10
                                            &trans     &trans     &trans        &trans      &trans      &trans
            >;
        };

// NUM 2
        NUM_layer {
            bindings = <
                            &to QWERTY  &to GAME    &to BASE    &none              &kp LBKT         &kp N7       &kp N8       &kp N9
      &none     &kp LGUI    &kp LALT    &kp LCTRL   &kp LSHFT   &none              &kp EQUAL        &kp N4       &kp N5       &kp N6      &kp SEMI   &kp RBKT
                &none       &none       &none       &none       &none              &kp BSLH         &kp N1       &kp N2       &kp N3      &kp GRAVE
                                            &trans     &trans     &trans        &kp MINUS      &kp N0      &kp DOT
            >;
        };

// SYM 3
        SYM_layer {
            bindings = <
                            &to QWERTY  &to GAME    &to BASE    &none              &kp LBRC         &kp AMPS    &kp ASTRK   &kp LPAR
      &none     &kp LGUI    &kp LALT    &kp LCTRL   &kp LSHFT   &none              &kp PLUS         &kp DLLR    &kp PRCNT   &kp CARET  &kp COLON  &kp RBRC
                &none       &none       &none       &none       &none              &kp PIPE         &kp EXCL    &kp AT      &kp HASH   &kp TILDE
                                            &trans     &trans     &trans        &kp UNDER      &kp LPAR      &kp RPAR
            >;
        };
/*
// MOUSE 4
        MOUSE_layer {
            bindings = <
                                  &msc SCRL_LEFT   &mmv MOVE_UP    &msc SCRL_RIGHT  &none              &none            &to BASE    &to GAME    &to QWERTY
    &msc SCRL_UP  &msc SCRL_DOWN  &mmv MOVE_LEFT   &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none              &none            &kp RSHFT   &kp RCTRL   &kp RALT    &kp RGUI   &none
                  &kp U_UND       &kp U_CUT        &kp U_CPY       &kp U_PST        &kp U_RDO          &none            &none       &none       &none      &none
                                                          &mkp MB3     &mkp MB1     &mkp MB2        &trans         &trans        &trans
            >;
        };
*/
// NAV 5
        NAV_layer {
            bindings = <
                             &kp HOME    &kp UP      &kp END     &kp INS            &none            &to BASE    &to GAME    &to QWERTY
      &kp PG_UP  &kp PG_DN   &kp LEFT    &kp DOWN    &kp RIGHT   &kp CAPS           &none            &kp RSHFT   &kp RCTRL   &kp RALT    &kp RGUI   &none
                 &kp K_UNDO  &kp K_CUT   &kp K_COPY  &kp K_PASTE &kp K_REDO         &none            &none       &none       &none       &none
                                            &kp DEL    &kp BSPC   &kp RET        &trans         &trans        &trans
            >;
        };

// MEDIA 6
        MEDIA_layer {
            bindings = <
                              &kp S        &kp C_VOL_UP  &kp V        &kp R                 &none            &to BASE    &to GAME    &to QWERTY
      &kp H      &kp M        &kp C_PREV   &kp C_VOL_DN  &kp C_NEXT   &kp E                 &none            &kp RSHFT   &kp RCTRL   &kp RALT    &kp RGUI   &none
                 &u_bt_sel_0  &u_bt_sel_1  &u_bt_sel_2   &u_bt_sel_3  &u_bt_sel_4            &none            &none       &none       &none      &none
                                            &kp C_MUTE   &kp C_PP  &kp C_STOP      &trans         &trans        &trans
            >;
        };

// QWERTY 7
        QWERTY_layer {
            bindings = <
                            &kp W       &kp E        &kp R        &kp T            &kp Y     &kp U        &kp I        &kp O
          &kp Q &mt LGUI A  &mt LALT S  &mt LCTRL D  &mt LSHFT F  &kp G            &kp H     &mt RSHFT J  &mt RCTRL K  &mt RALT L  &mt RGUI SEMI  &kp P
                &kp Z       &kp X       &kp C        &kp V        &kp B            &kp N     &kp M        &kp COMMA    &kp DOT     &kp FSLH
                                            &kp DEL    &kp BSPC    &kp RET     &kp TAB     &kp SPACE  &to BASE
            >;
        };

// GAME 8
        GAME_layer {
            bindings = <
                             &kp Q       &kp W       &kp E     &kp R                &kp N7            &kp N8       &kp N9       &to QWERTY
      &kp LCTRL  &kp TAB     &kp A       &kp S       &kp D     &kp F                &kp N4            &kp N5       &kp N6       &none      &none  &none
                 &kp LSHFT   &kp Z       &kp X       &kp C     &kp V                &kp N1            &kp N2       &kp N3       &none      &none
                                            &kp LALT   &kp SPACE  &kp T        &trans         &trans        &to BASE
            >;
        };
    };
};
